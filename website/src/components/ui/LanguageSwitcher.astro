---
import { applyStyles } from "@/utils/apply-styles";
import {
  SUPPORTED_LOCALES,
  getLocaleFromUrl,
  addLocaleToUrl,
  removeLocaleFromUrl,
} from "@/utils/i18n";

interface LocaleInfo {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

const localeInfo: Record<string, LocaleInfo> = {
  "en-US": {
    code: "en-US",
    name: "English",
    nativeName: "English",
    flag: "üá∫üá∏",
  },
  "zh-CN": { code: "zh-CN", name: "Chinese", nativeName: "‰∏≠Êñá", flag: "üá®üá≥" },
  "ko-KR": { code: "ko-KR", name: "Korean", nativeName: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" },
  "id-ID": {
    code: "id-ID",
    name: "Indonesian",
    nativeName: "Bahasa Indonesia",
    flag: "üáÆüá©",
  },
  "ja-JP": {
    code: "ja-JP",
    name: "Japanese",
    nativeName: "Êó•Êú¨Ë™û",
    flag: "üáØüáµ",
  },
  "ru-RU": {
    code: "ru-RU",
    name: "Russian",
    nativeName: "–†—É—Å—Å–∫–∏–π",
    flag: "üá∑üá∫",
  },
  "es-ES": {
    code: "es-ES",
    name: "Spanish",
    nativeName: "Espa√±ol",
    flag: "üá™üá∏",
  },
  "de-DE": { code: "de-DE", name: "German", nativeName: "Deutsch", flag: "üá©üá™" },
  "hi-IN": { code: "hi-IN", name: "Hindi", nativeName: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" },
};

const currentLocale = getLocaleFromUrl(Astro.url.pathname);
const currentPath = removeLocaleFromUrl(Astro.url.pathname);

export interface Props {
  id?: string;
  class?: string;
  variant?: "dropdown" | "buttons";
  label?: string;
  disabled?: boolean;
}

const {
  id = "language-switcher",
  class: className,
  variant = "dropdown",
  label,
  disabled = false,
  ...rest
} = Astro.props;
---

<div class={applyStyles("language-switcher-wrapper", className)}>
  {
    label && (
      <label for={id} class="language-switcher-label">
        {label}
      </label>
    )
  }

  {
    variant === "dropdown" && (
      <div class="language-switcher">
        <select
          id={id}
          class="language-select font-button"
          aria-label="Choose language"
          disabled={disabled}
          {...rest}
        >
          {SUPPORTED_LOCALES.map((locale) => (
            <option
              value={locale}
              selected={locale === currentLocale}
              data-url={addLocaleToUrl(currentPath, locale)}
            >
              {localeInfo[locale].flag} {localeInfo[locale].nativeName}
            </option>
          ))}
        </select>

        <svg
          class="language-select-arrow"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fill-rule="evenodd"
            d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
            clip-rule="evenodd"
          />
        </svg>
      </div>
    )
  }

  {
    variant === "buttons" && (
      <div class="language-switcher-buttons">
        {SUPPORTED_LOCALES.map((locale) => (
          <a
            href={addLocaleToUrl(currentPath, locale)}
            class={applyStyles(
              "language-button font-button",
              locale === currentLocale && "active",
              disabled && "disabled",
            )}
            aria-current={locale === currentLocale ? "page" : undefined}
            tabindex={disabled ? -1 : undefined}
          >
            <span class="language-flag">{localeInfo[locale].flag}</span>
            <span class="language-name">{localeInfo[locale].nativeName}</span>
          </a>
        ))}
      </div>
    )
  }
</div>

<style>
  .language-switcher-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .language-switcher-label {
    font-weight: 600;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--color-text-title-primary);
  }

  .language-switcher {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  .language-select {
    border-radius: 100px;
    background: var(--color-input-body);
    border: 2px solid transparent;
    padding: 0.625rem 3rem 0.625rem 1.25rem;
    color: var(--color-input-text);
    transition: all 0.2s ease-in-out;
    outline: none;
    width: 100%;
    box-sizing: border-box;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
  }

  .language-select:focus {
    border-color: var(--color-input-focus);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  }

  .language-select:hover {
    border-color: rgba(0, 123, 255, 0.3);
  }

  .language-select:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: #f8f9fa;
  }

  .language-select-arrow {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-input-text);
    pointer-events: none;
    transition: all 0.2s ease-in-out;
  }

  .language-select:focus + .language-select-arrow {
    color: var(--color-input-focus);
  }

  .language-switcher-buttons {
    display: flex;
    gap: 0.25rem;
    background: var(--color-form-input-body);
    border: 1px solid var(--color-form-input-body-border);
    padding: 0.25rem;
    border-radius: var(--radius-quantus);
    backdrop-filter: blur(10px);
    width: 100%;
    box-sizing: border-box;
  }

  .language-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: calc(var(--radius-quantus) - 0.25rem);
    text-decoration: none;
    color: var(--color-form-input-text);
    transition: all 0.2s ease-in-out;
    position: relative;
    flex: 1;
    justify-content: center;
    min-width: 0;
  }

  .language-button:hover:not(.disabled) {
    background: rgba(255, 255, 255, 0.1);
    color: var(--color-text-title-primary);
  }

  .language-button.active {
    background: var(--color-button-primary);
    color: var(--color-text-title-primary);
  }

  .language-button.disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .language-flag {
    font-size: 1rem;
    flex-shrink: 0;
  }

  .language-name {
    font-size: 0.875rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .language-select,
    .language-button,
    .language-select-arrow {
      transition: none;
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .language-name {
      display: none;
    }

    .language-button {
      padding: 0.5rem;
    }

    .language-switcher-buttons {
      justify-content: center;
    }
  }
</style>

<script>
  const languageSelects = document.querySelectorAll(".language-select");

  languageSelects.forEach((select) => {
    // Handle language change
    select.addEventListener("change", function (this: any) {
      const selectedOption = this.options[this.selectedIndex];
      const url = selectedOption.dataset.url;

      if (url) window.location.href = url;
    });

    // Enhanced focus management
    select.addEventListener("focus", function () {
      select.setAttribute("data-focused", "true");
    });

    select.addEventListener("blur", function () {
      select.removeAttribute("data-focused");
    });
  });
</script>
