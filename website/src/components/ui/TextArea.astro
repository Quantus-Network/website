---
import { applyStyles } from "@/utils/apply-styles";

// TextArea.astro
export interface Props {
  id: string;
  title?: string;
  label?: string;
  asContact?: boolean;
  class?: string;
  placeholder?: string;
  required?: boolean;
  error?: string;
  value?: string;
  name?: string;
  disabled?: boolean;
  "aria-describedby"?: string;
  rows?: number;
  cols?: number;
  maxlength?: number;
  minlength?: number;
  resize?: "none" | "both" | "horizontal" | "vertical";
  spellcheck?: boolean;
  wrap?: "hard" | "soft";
}

const {
  id,
  label,
  placeholder,
  required = false,
  error,
  value = "",
  name,
  disabled = false,
  "aria-describedby": ariaDescribedBy,
  class: className,
  asContact,
  rows = 4,
  cols,
  maxlength,
  minlength,
  resize = "vertical",
  spellcheck = true,
  wrap = "soft",
  ...rest
} = Astro.props;

// Generate unique IDs for accessibility
const errorId = `${id}-error`;
const countId = maxlength ? `${id}-count` : undefined;

// Combine aria-describedby values
const describedBy =
  [error ? errorId : "", countId, ariaDescribedBy || ""]
    .filter(Boolean)
    .join(" ")
    .trim() || undefined;
---

<div class={applyStyles("textarea-wrapper", className)}>
  {
    label && (
      <label for={id} class={`textarea-label ${required ? "required" : ""}`}>
        {label}
      </label>
    )
  }

  <div class="textarea-container">
    <textarea
      id={id}
      name={name || id}
      value={value}
      placeholder={placeholder}
      required={required}
      disabled={disabled}
      rows={rows}
      cols={cols}
      maxlength={maxlength}
      minlength={minlength}
      spellcheck={spellcheck}
      wrap={wrap}
      aria-invalid={error ? "true" : "false"}
      aria-describedby={describedBy}
      class={applyStyles(
        "textarea-field font-button",
        error && "error",
        asContact && "font-small contact",
      )}
      style={`resize: ${resize};`}
      {...rest}></textarea>

    {
      maxlength && (
        <div id={countId} class="character-count" aria-live="polite">
          <span class="current-count">0</span>
          <span class="max-count">/{maxlength}</span>
        </div>
      )
    }
  </div>

  {
    error && (
      <div id={errorId} class="error-message" role="alert" aria-live="polite">
        <svg
          class="error-icon"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fill-rule="evenodd"
            d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z"
            clip-rule="evenodd"
          />
        </svg>
        <span>{error}</span>
      </div>
    )
  }

  <!-- Screen reader only validation status -->
  {
    error && (
      <span class="sr-only" aria-live="polite">
        Error: {error}
      </span>
    )
  }
</div>

<style>
  .textarea-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .textarea-label {
    font-weight: 600;
    font-size: 0.875rem;
    line-height: 1.25rem;
  }

  .textarea-label.required::after {
    content: " *";
    color: var(--color-input-error);
  }

  .textarea-container {
    position: relative;
    width: 100%;
  }

  .textarea-field {
    border-radius: 1rem;
    background: var(--color-input-body);
    border: 2px solid transparent;
    padding: 0.75rem 1.25rem;
    color: var(--color-input-text);
    transition: all 0.2s ease-in-out;
    outline: none;
    width: 100%;
    box-sizing: border-box;
    font-family: inherit;
    line-height: 1.5;
    min-height: 3rem;
  }

  .textarea-field.contact {
    border-radius: var(--radius-quantus);
    background: var(--color-form-input-body);
    border: 1px solid var(--color-form-input-body-border);
    padding: 0.75rem 1.25rem;
    color: var(--color-form-input-text);
  }

  .textarea-field::placeholder {
    color: var(--color-input-text);
  }

  .textarea-field.contact::placeholder {
    color: var(--color-form-input-text);
  }

  .textarea-field:focus {
    border-color: var(--color-input-focus);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  }

  .textarea-field:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: #f8f9fa;
    resize: none;
  }

  .textarea-field.error {
    border-color: var(--color-input-error);
  }

  .textarea-field.error:focus {
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
  }

  .character-count {
    position: absolute;
    bottom: 0.5rem;
    right: 0.75rem;
    font-size: 0.75rem;
    color: var(--color-input-text);
    opacity: 0.7;
    background: var(--color-input-body);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    pointer-events: none;
    line-height: 1;
  }

  .textarea-field.contact + .character-count {
    background: var(--color-form-input-body);
    color: var(--color-form-input-text);
  }

  .character-count .current-count {
    font-weight: 600;
  }

  .character-count.warning .current-count {
    color: #f59e0b;
  }

  .character-count.error .current-count {
    color: var(--color-input-error);
  }

  .error-message {
    color: var(--color-input-error);
    font-size: 0.875rem;
    line-height: 1.25rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .error-icon {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Auto-resize functionality */
  .textarea-field[data-auto-resize] {
    overflow: hidden;
    resize: none;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .textarea-field {
      transition: none;
    }
  }

  /* Focus ring enhancement for better visibility */
  @media (prefers-contrast: high) {
    .textarea-field:focus {
      border-width: 3px;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.3);
    }
  }
</style>

<script>
  const textareas =
    document.querySelectorAll<HTMLTextAreaElement>(".textarea-field");

  textareas.forEach((textarea) => {
    const wrapper = textarea.closest(".textarea-wrapper");
    const characterCount = wrapper?.querySelector(".character-count");
    const currentCount = characterCount?.querySelector(".current-count");
    const maxlength = parseInt(textarea.getAttribute("maxlength") || "0");

    // Enhanced focus management
    textarea.addEventListener("focus", function () {
      textarea.setAttribute("data-focused", "true");
    });

    textarea.addEventListener("blur", function () {
      textarea.removeAttribute("data-focused");
    });

    // Character counter functionality
    if (characterCount && currentCount && maxlength > 0) {
      const updateCount = () => {
        const current = textarea.value.length;
        currentCount.textContent = current.toString();

        // Remove existing classes
        characterCount.classList.remove("warning", "error");

        // Add appropriate class based on usage
        if (current >= maxlength) {
          characterCount.classList.add("error");
        } else if (current >= maxlength * 0.8) {
          characterCount.classList.add("warning");
        }
      };

      // Update count on input
      textarea.addEventListener("input", updateCount);

      // Initialize count
      updateCount();
    }

    // Auto-resize functionality (optional)
    if (textarea.hasAttribute("data-auto-resize")) {
      const autoResize = () => {
        textarea.style.height = "auto";
        textarea.style.height = textarea.scrollHeight + "px";
      };

      textarea.addEventListener("input", autoResize);

      // Initialize height
      autoResize();
    }

    // Enhanced keyboard navigation
    textarea.addEventListener("keydown", function (e) {
      // Allow Tab to insert tabs in textarea (optional behavior)
      if (e.key === "Tab" && textarea.hasAttribute("data-allow-tabs")) {
        e.preventDefault();
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;

        textarea.value =
          textarea.value.substring(0, start) +
          "\t" +
          textarea.value.substring(end);
        textarea.selectionStart = textarea.selectionEnd = start + 1;

        // Trigger input event for character counter
        textarea.dispatchEvent(new Event("input", { bubbles: true }));
      }
    });
  });
</script>
