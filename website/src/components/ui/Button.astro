---
import { applyStyles } from "@/utils/apply-styles";

export interface Props {
  id?: string;
  variant?: "primary" | "outline" | "secondary";
  size?: "small" | "medium" | "large";
  disabled?: boolean;
  type?: "button" | "submit" | "reset";
  ariaLabel?: string;
  ariaDescribedBy?: string;
  class?: string;
  onclick?: string;
  href?: string;
  target?: string;
  rel?: string;
}

const {
  variant = "primary",
  size = "medium",
  disabled = false,
  type = "button",
  ariaLabel,
  ariaDescribedBy,
  class: className = "",
  onclick,
  href,
  target,
  rel,
  ...rest
} = Astro.props;

const baseClasses = "btn font-button";
const variantClasses = `btn--${variant}`;
const sizeClasses = `btn--${size}`;
const disabledClasses = disabled ? "btn--disabled" : "";
---

{
  !href && (
    <button
      type={type}
      class={applyStyles(
        baseClasses,
        variantClasses,
        sizeClasses,
        disabledClasses,
        className,
      )}
      disabled={disabled}
      aria-label={ariaLabel}
      aria-describedby={ariaDescribedBy}
      onclick={onclick}
      {...rest}
    >
      <slot />
    </button>
  )
}

{
  href && (
    <a
      class={applyStyles(
        baseClasses,
        variantClasses,
        sizeClasses,
        disabledClasses,
        className,
      )}
      href={href}
      target={target ?? "_blank"}
      rel={rel ?? "noopener noreferrer"}
    >
      <slot />
    </a>
  )
}

<style>
  .btn {
    /* Base button styles */
    display: inline-flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
    border-radius: 100px;
    border: none;
    cursor: pointer;
    font-family: inherit;
    text-decoration: none;
    transition: all 0.2s ease-in-out;
    position: relative;
    overflow: hidden;

    /* Remove default button styles */
    background: none;
    outline: none;
  }

  /* Primary variant with your gradient */
  .btn--primary {
    background: var(--color-button-primary);
    backdrop-filter: blur(0.5px);
    color: var(--color-text-title-primary);
  }

  /* Outline variant */
  .btn--outline {
    border: 1px solid var(--color-button-outline);
    backdrop-filter: blur(0.5px);
    color: var(--color-text-title-primary);
  }

  /* Secondary variant */
  .btn--secondary {
    background: var(--color-button-secondary);
    backdrop-filter: blur(0.5px);
    color: var(--color-text-content-black);
  }

  /* Size variations */
  .btn--small {
    padding: 8px 20px;
  }

  .btn--medium {
    padding: 12px 27px;
  }

  .btn--large {
    padding: 16px 40px;
  }

  /* Hover states */
  .btn--primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(237, 76, 206, 0.3);
  }

  .btn--secondary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(237, 76, 206, 0.3);
  }

  /* Focus states for accessibility */
  .btn:focus-visible {
    outline: 2px solid #00f;
    outline-offset: 2px;
  }

  /* Active states */
  .btn:active:not(:disabled) {
    transform: translateY(0);
  }

  /* Disabled state */
  .btn--disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  /* Loading state */
  .btn--loading {
    position: relative;
    pointer-events: none;
  }

  .btn--loading::after {
    content: "";
    position: absolute;
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .btn--primary {
      border: 2px solid white;
    }

    .btn--secondary {
      border: 2px solid white;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .btn {
      transition: none;
    }

    .btn:hover:not(:disabled) {
      transform: none;
    }

    .btn--loading::after {
      animation: none;
    }
  }
</style>
