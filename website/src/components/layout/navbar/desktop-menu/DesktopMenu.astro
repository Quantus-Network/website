---
import { SITE_NAVIGATIONS } from "@/constants/site-navigations";
import { applyStyles } from "@/utils/apply-styles";
import {
  createTranslator,
  getLocaleFromUrl,
  getLocalizedPath,
} from "@/utils/i18n";

const locale = getLocaleFromUrl(Astro.url.pathname);
const t = await createTranslator(locale);
---

<div class="navbar-desktop:block hidden">
  <div id="desktop-nav-links" class="flex items-center gap-x-4">
    {
      SITE_NAVIGATIONS.map((item) => (
        <a
          href={getLocalizedPath(locale, item.href)}
          class={applyStyles(
            "text-navbar-link block transition-colors duration-200 hover:font-bold",
          )}
        >
          {t(item.label)}
        </a>
      ))
    }
  </div>
</div>

<script>
  import { getLocaleFromUrl, getLocalizedPath } from "@/utils/i18n";
  const locale = getLocaleFromUrl(location.pathname);

  const desktopNavLinks = document.getElementById("desktop-nav-links");
  const links = desktopNavLinks?.querySelectorAll("a");

  const updateLinkStatus = (link: HTMLAnchorElement, isActive: boolean) => {
    if (isActive) {
      link.classList.add("font-bold");
      link.setAttribute("aria-current", "page");
    } else {
      link.classList.remove("font-bold");
      link.removeAttribute("aria-current");
    }
  };

  links?.forEach((link) => {
    const isActive =
      location.href === getLocalizedPath(locale, link.href) ||
      location.pathname === getLocalizedPath(locale, link.href);
    updateLinkStatus(link, isActive);

    link.addEventListener("click", () => {
      links.forEach((val) => {
        const isActive = val.href === getLocalizedPath(locale, link.href);
        updateLinkStatus(val, isActive);
      });
    });
  });
</script>
